{"version":3,"sources":["assets/loader.gif","components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppNavbar","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isOpen","toggle","setState","inherits","createClass","key","value","react_default","a","createElement","reactstrap_es","color","dark","expand","className","href","onClick","navbar","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","_this2","items","itemReducer","loading","src","loader","alt","react_transition_group","map","_ref","_id","name","timeout","classNames","size","connect","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","sent","payload","data","t0","console","error","stop","_x","_ref3","_callee3","_context3","success","result","log","_x3","ItemModal","modal","onChange","e","defineProperty","target","onSubmit","preventDefault","newItem","addItem","style","marginBottom","marginLeft","for","placeholder","marginTop","block","item","_ref2","_callee2","_context2","_x2","initialState","combineReducers","undefined","action","objectSpread","toConsumableArray","filter","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","es","Store","components_AppNavbar","components_ItemModal","components_ShoppingList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00903cc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.3f8b890b.gif\";","import React, { Component } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container } from 'reactstrap';\r\n\r\nexport class AppNavbar extends Component{\r\n\r\n    state = {\r\n        isOpen : false\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                  <Container>\r\n                      <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\r\n                      <NavbarToggler onClick={this.toggle} />\r\n                      <Collapse isOpen={this.state.isOpen} navbar>\r\n                          <Nav className=\"ml-auto\" navbar>\r\n                              <NavItem>\r\n                                  <NavLink href=\"https://github.com/tshi206\">\r\n                                      GitHub\r\n                                  </NavLink>\r\n                              </NavItem>\r\n                          </Nav>\r\n                      </Collapse>\r\n                  </Container>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"./types\";\r\n\r\nexport const getItems = () => async dispatch => {\r\n    dispatch(setItemsLoading());\r\n    try {\r\n        const res = await axios[\"get\"](\"/api/items\");\r\n        dispatch({\r\n            type: GET_ITEMS,\r\n            payload: res.data\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n};\r\n\r\nexport const addItem = item => async dispatch => {\r\n    dispatch(setItemsLoading());\r\n    try {\r\n        const res = await axios[\"post\"](\"/api/items\", item);\r\n        dispatch({\r\n            type: ADD_ITEM,\r\n            payload: res.data\r\n        })\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n};\r\n\r\nexport const deleteItem = id => async dispatch => {\r\n    dispatch(setItemsLoading());\r\n    try {\r\n        const res = await axios[\"delete\"](`/api/items/${id}`);\r\n        if (res.data.success) {\r\n            dispatch({\r\n                type: DELETE_ITEM,\r\n                payload: res.data.result._id\r\n            })\r\n        } else {\r\n            console.log(res.data.error)\r\n        }\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n};","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";","import React, { Component } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from \"../actions/itemActions\";\r\nimport PropTypes from 'prop-types';\r\nimport loader from '../assets/loader.gif';\r\n\r\nclass ShoppingList extends Component {\r\n\r\n\r\n\r\n    onDeleteClick = id => () => this.props.deleteItem(id);\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    render() {\r\n        const { items } = this.props.itemReducer;\r\n        return (\r\n            <Container>\r\n                {\r\n                    (() => {\r\n                        if (this.props.itemReducer.loading) return <img src={loader} alt=\"loading\"/>;\r\n                        return <ListGroup>\r\n                            <TransitionGroup className=\"shopping-list\">\r\n                                {\r\n                                    items.map( ({_id, name}) => (\r\n                                        <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                            <ListGroupItem>\r\n                                                <Button className=\"remove-btn\" color=\"danger\" size=\"sm\" onClick={this.onDeleteClick(_id)}>\r\n                                                    &times;\r\n                                                </Button>\r\n                                                {name}\r\n                                            </ListGroupItem>\r\n                                        </CSSTransition>\r\n                                    ))\r\n                                }\r\n                            </TransitionGroup>\r\n                        </ListGroup>\r\n                    })()\r\n                }\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes[\"func\"].isRequired,\r\n    itemReducer: PropTypes[\"object\"].isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    itemReducer: state.itemReducer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { addItem } from \"../actions/itemActions\";\r\n\r\nclass ItemModal extends Component {\r\n\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({modal: !this.state.modal})\r\n    };\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.name] : e.target.value })\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const newItem = {\r\n            name: this.state.name || \"Unknown Item Name\"\r\n        };\r\n        // Add item via addItem action\r\n        this.props.addItem(newItem);\r\n        // Close the modal\r\n        this.toggle()\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    color=\"dark\"\r\n                    style={{marginBottom: \"2rem\", marginLeft: \"1rem\"}}\r\n                    onClick={this.toggle}\r\n                >Add Item</Button>\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        Add To Shopping List\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">\r\n                                    Item\r\n                                </Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add shopping item\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: \"2rem\"}}\r\n                                    block\r\n                                >\r\n                                    Add Item\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nItemModal.propTypes = {\r\n    addItem: PropTypes[\"func\"].isRequired,\r\n    itemReducer: PropTypes[\"object\"]\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    itemReducer: state.itemReducer\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items],\r\n                loading: false\r\n            };\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload),\r\n                loading: false\r\n            };\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    itemReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [ thunk ];\r\n\r\n// Allow the app to work if the redux dev tool is no found in the browser\r\n// noinspection JSUnresolvedVariable\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    // compose(\r\n    //     applyMiddleware(...middleware),\r\n    //     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    // )\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store\r\n","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\n\nimport { Provider } from 'react-redux';\nimport Store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Container} from \"reactstrap\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={Store}>\n                <div className=\"App\">\n                    <AppNavbar/>\n                    <Container>\n                        <ItemModal/>\n                        <ShoppingList/>\n                    </Container>\n                </div>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}