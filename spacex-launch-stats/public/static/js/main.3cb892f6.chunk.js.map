{"version":3,"sources":["assets/loader.gif","logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","components_MissionKey","react_apollo_browser_umd","client","undefined","fetchPolicy","notifyOnNetworkStatusChange","onCompleted","onError","pollInterval","query","variables","ssr","partialRefetch","children","loading","error","data","src","loader","alt","console","log","launches","map","components_LaunchItem","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","ApolloClient","uri","App","BrowserRouter","logo","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb892f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.3f8b890b.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.942dc82f.png\";","import React from \"react\";\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\r\n    return <div className=\"card card-body mb-3\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-9\">\r\n                <h4>Mission: <span className={classNames({\r\n                    'text-success': launch_success,\r\n                    'text-danger': !launch_success\r\n                })}>{ mission_name }</span></h4>\r\n                <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default LaunchItem","import React from 'react';\r\n\r\nexport const MissionKey = () => {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MissionKey","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport loader from '../assets/loader.gif';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h1 className=\"display-4 my-3\">\r\n                    Launches\r\n                </h1>\r\n                <MissionKey/>\r\n                <Query\r\n                    client={undefined}\r\n                    fetchPolicy={undefined}\r\n                    notifyOnNetworkStatusChange={undefined}\r\n                    onCompleted={undefined}\r\n                    onError={undefined}\r\n                    pollInterval={undefined}\r\n                    query={LAUNCHES_QUERY}\r\n                    variables={undefined}\r\n                    ssr={undefined}\r\n                    partialRefetch={undefined}\r\n                    children={undefined}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if (loading) return <img src={loader} alt=\"loading\"/>;\r\n                            if (error) console.log(error);\r\n                            return <Fragment>\r\n                                    {\r\n                                        data.launches.map(launch => <LaunchItem key={launch.flight_number} launch={launch}/>)\r\n                                    }\r\n                            </Fragment>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launches;","import React, {Component, Fragment} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport loader from \"../assets/loader.gif\";\r\nimport Moment from 'react-moment';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local,\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launch extends Component {\r\n    render() {\r\n        let { flight_number } = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n        return (\r\n            <Fragment>\r\n                <Query\r\n                    client={undefined}\r\n                    fetchPolicy={undefined}\r\n                    notifyOnNetworkStatusChange={undefined}\r\n                    onCompleted={undefined}\r\n                    onError={undefined}\r\n                    pollInterval={undefined}\r\n                    query={LAUNCH_QUERY}\r\n                    variables={{ flight_number }}\r\n                    ssr={undefined}\r\n                    partialRefetch={undefined}\r\n                    children={undefined}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if (loading) return <img src={loader} alt=\"loading\"/>;\r\n                            if (error) console.log(error);\r\n                            const { mission_name, flight_number, launch_year, launch_success, launch_date_local, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\r\n                            return (\r\n                                <div>\r\n                                    <h1 className=\"display-4 my-3\">\r\n                                        <span className=\"text-dark\">\r\n                                            Mission: {mission_name}\r\n                                        </span>\r\n                                    </h1>\r\n                                    <h4 className=\"mb-3\">\r\n                                        Launch Details\r\n                                    </h4>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                                        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                                        <li className=\"list-group-item\"><span className={classNames({ 'text-success': launch_success, 'text-danger': !launch_success })}>Launch Successful: {launch_success ? \"Yes\" : \"No\"}</span></li>\r\n                                        <li className=\"list-group-item\">Launch Date Local: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></li>\r\n                                    </ul>\r\n                                    <h4 className=\"my-3\">\r\n                                        Rocket Details\r\n                                    </h4>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                    </ul>\r\n                                    <hr/>\r\n                                    <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launch","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport logo from './logo.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div className=\"container\">\n                        <img\n                            src={logo}\n                            alt=\"SpaceX\"\n                            style={{width: 300, display: 'block', margin: 'auto'}} />\n                        <Route exact path=\"/\" component={Launches}/>\n                        <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n                    </div>\n                </Router>\n            </ApolloProvider>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}